// this program is automatically generated by jenerator. do not edit.
#include "../framework.hpp"
#include "anomaly_server.hpp"
#include "anomaly_serv.hpp"
using namespace jubatus;
using namespace jubatus::framework;
#define RETURN_OR_THROW(f) try { \
  return f; \
} catch (const jubatus::exception::jubatus_exception& e) { \
  LOG(WARNING) << e.diagnostic_information(true); \
  throw; \
} catch (const std::exception& e) { \
  LOG(ERROR) << e.what(); \
  throw; \
}
namespace jubatus { namespace server {
class anomaly_impl_ : public anomaly<anomaly_impl_>
{
public:
  anomaly_impl_(const server_argv& a):
    anomaly<anomaly_impl_>(a.timeout),
    p_(new server_helper<anomaly_serv>(a, true))
  {}

  bool set_config(std::string name, std::string conf) //update broadcast
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->set_config(conf)); }

  std::string get_config(std::string name) //analysis random
  { JRLOCK__(p_); RETURN_OR_THROW(get_p()->get_config()); }

  bool clear_row(std::string name, std::string id) //update cht(2)
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->clear_row(id)); }

  std::pair<std::string,float > add(std::string name, datum d) //update random
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->add(d)); }

  float update(std::string name, std::string id, datum d) //update cht(2)
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->update(id, d)); }

  bool clear(std::string name) //update broadcast
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->clear()); }

  float calc_score(std::string name, datum d) //analysis random
  { JRLOCK__(p_); RETURN_OR_THROW(get_p()->calc_score(d)); }

  std::vector<std::string > get_all_rows(std::string name) //analysis broadcast
  { JRLOCK__(p_); RETURN_OR_THROW(get_p()->get_all_rows()); }

  bool save(std::string name, std::string arg1) //update broadcast
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->save(arg1)); }

  bool load(std::string name, std::string arg1) //update broadcast
  { JWLOCK__(p_); RETURN_OR_THROW(get_p()->load(arg1)); }

  std::map<std::string,std::map<std::string,std::string > > get_status(std::string name) //analysis broadcast
  { JRLOCK__(p_); RETURN_OR_THROW(p_->get_status()); }
  int run(){ return p_->start(*this); };
  common::cshared_ptr<anomaly_serv> get_p(){ return p_->server(); };
private:
  common::cshared_ptr<server_helper<anomaly_serv> > p_;
};
}} // namespace jubatus::server
int main(int args, char** argv){
  return
    jubatus::framework::run_server<jubatus::server::anomaly_impl_>
       (args, argv, "anomaly");
}
