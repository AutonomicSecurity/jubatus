import Options

def options(opt):
  pass

def configure(conf):
  libpat = conf.env.cxxshlib_PATTERN
  conf.define('LIBSPLITTER_SAMPLE', libpat % 'splitter_sample')
  conf.define('LIBFILTER_SAMPLE', libpat % 'filter_sample')
  conf.define('LIBNUM_FEATURE_SAMPLE', libpat % 'num_feature_sample')
  conf.define('LIBNUM_FILTER_SAMPLE', libpat % 'num_filter_sample')

def make_test(bld, use, src):
  bld.program(
    features = 'gtest',
    source = src,
    target = src[0:src.rindex('.')],
    use = use,
    )

def make_tests(bld, use, srcs):
  for src in srcs:
    make_test(bld, use, src)


def build(bld):
  source = [
    'util.cpp',
    'datum_to_fv_converter.cpp',
    'space_splitter.cpp',
    'character_ngram.cpp',
    'without_split.cpp',
    'key_matcher_factory.cpp',
    'splitter_factory.cpp',
    'num_feature_factory.cpp',
    'converter_config.cpp',
    'string_filter_factory.cpp',
    'num_filter_factory.cpp',
    'revert.cpp',
    'weight_manager.cpp',
    'keyword_weights.cpp',
    'feature_hasher.cpp',
    ]
  use = 'PFICOMMON MSGPACK jubacommon'

  bld.shlib(
    source = source,
    target = 'jubaconverter',
    name = 'jubaconverter',
    includes = '.',
    use = use)


  bld.install_files('${PREFIX}/include/jubatus/core/fv_converter', """
    character_ngram.hpp
    converter_config.hpp
    counter.hpp
    datum.hpp
    datum_to_fv_converter.hpp
    exact_match.hpp
    exception.hpp
    except_match.hpp
    feature_hasher.hpp
    key_matcher_factory.hpp
    key_matcher.hpp
    keyword_weights.hpp
    match_all.hpp
    num_feature_factory.hpp
    num_feature.hpp
    num_feature_impl.hpp
    num_filter_factory.hpp
    num_filter.hpp
    num_filter_impl.hpp
    prefix_match.hpp
    revert.hpp
    space_splitter.hpp
    splitter_factory.hpp
    string_filter_factory.hpp
    string_filter.hpp
    suffix_match.hpp
    util.hpp
    weight_manager.hpp
    without_split.hpp
    word_splitter.hpp
    """)
