
subdirs = ['jsonconfig']

def options(opt):
  opt.recurse(subdirs)

def configure(conf):
  conf.check_cxx(header_name = 'sys/socket.h net/if.h sys/ioctl.h', mandatory = True)
  conf.check_cxx(header_name = 'netinet/in.h arpa/inet.h', mandatory = True)

  # Check compiler(GCC/Clang) support atomic builtin extension
  conf.check_cxx(fragment='''
#include <stdint.h>
int main() {
  uint64_t c = 0;
  __sync_fetch_and_add(&c, 0);
  return 0;
}
''',
                 msg = 'Checking for compiler atomic builtins',
                 define_name = 'ATOMIC_I8_SUPPORT', mandatory = False)

  conf.recurse(subdirs)

def build(bld):
  import Options
  src = 'exception.cpp key_manager.cpp vector_util.cpp util.cpp'
  src += ' jsonconfig/config.cpp jsonconfig/exception.cpp'

  bld.shlib(
    source = src,
    target = 'jubacommon',
    includes = '.',
    use = 'PFICOMMON LIBGLOG ZOOKEEPER_MT'
    )

  test_src = [
    'exception_test.cpp',
    'key_manager_test.cpp',
    'util_test.cpp',
    'vector_util_test.cpp',
     'jsonconfig_test.cpp',
    ]

  def make_test(s):
    bld.program(
      features = 'gtest',
      source = s,
      target = s[0:s.rfind('.')],
      includes = '.',
      use = 'jubacommon'
      )
  for s in test_src:
    make_test(s)

  bld.install_files('${PREFIX}/include/jubatus/common/', [
      'byte_buffer.hpp',
      'exception.hpp',
      'exception_info.hpp',
      'global_id_generator_base.hpp',
      'hash.hpp',
      'jsonconfig.hpp',
      'key_manager.hpp',
      'shared_ptr.hpp',
      'type.hpp',
      'unordered_map.hpp',
      'util.hpp',
      'vector_util.hpp',
      ])
  bld.recurse(subdirs)
